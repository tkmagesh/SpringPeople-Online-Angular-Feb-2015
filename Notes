Day-01
======

1. Angular?
    Framework for building RIA (Rich Internet Applications)

Secrets of the JavaScript Ninja - Manning Publication

Views
    - As dumb as possible
    - Reactive 
    
    
Day-2
=====
1. Model & Views synchronized
2. Modularize
3. Dependency Injection
4. Generating Views
5. Routing
6. Server Communication


Knockout.js
    1 & 4
    For 2 & 3 -> Require.js
    For 5 -> crossroads.js
    For 6 -> breeze.js
    
Backbone.js
    2, 5, & 6
    For 1 -> Code it
    For 3 -> Require.js
    For 4 -> Handlebars.js & jQuery
    
Ember.js 
    Everything except 3
    
Angular.js


Building Blocks Angular.js
===========================

1. Module
     - Container for all your application components
     
2. Controller
3. Directive
4. Filter
5. Factory
6. Service
7. Provider
8. Value
9. Constant

Digest cycle is triggered when you call 
$scope.$apply(function(){
    
})


Day-3
=====
Bug Tracker
Use Cases
=========

1. Display a list of bugs
2. Add a new Bug
3. Close an existing Bug
4. Status of the bug (Closed / Open) has to be displayed visually
5. Remove the closed bugs
6. Display statistics
7. Search for bugs
8. Display the 'created at' for each bug
9. sort the bugs by title or status or createdAt
10. Persist the bugs in the local storage
11. Persist the bugs in the server
12. Add validations to the bugs screen
13. Create categories of bugs
14. Implement a routing strategy


16. Unit Testing
17. Web Sockets


localStorage
============
key/value store
    window.localStorage
    both key and value should be string

APIs
    setItem(key, value)
    getItem(key) => value
    removeItem(key)
    key(index) => key
    clear()
    length
    
Same origin policy
a.com 
b.com

Server Communication
$http
$resource


RESTful
    data as a resource 
    
    url 
    http://myapp.com/categories/1
    GET - select
    POST - insert
    PUT - update
    DELETE - delete
    
    HTTP Status codes - 
    
    
Asynchronous Operations
1. callbacks
2. events


function getCalculator(){
    var eventHandlers = [];
    return {
        addResultHandler : function(resultHandler){
            eventHandlers.push(resultHandler);
        },
        add : function(x,y){
            setTimeout(function(){
                var result = x + y;
                eventHandlers.forEach(function(handler){
                    handler(result);
                });
            },5000)
        }
    }
}


QUnit

Jasmine
    expect
    Jasmine Spy
    
Mocha
    chai.js
        expect
        should
        assert
    Sinon.js

